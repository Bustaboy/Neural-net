version: '3.8'

services:
  # Main trading bot service
  trading-bot:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=production
    container_name: enhanced-trading-bot
    restart: unless-stopped
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    
    # Environment variables
    environment:
      - PYTHONUNBUFFERED=1
      - TZ=UTC
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - PROMETHEUS_MULTIPROC_DIR=/tmp/prometheus
    
    # Environment file
    env_file:
      - .env
    
    # Volumes
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models
      - ./data:/app/data
      - ./config:/app/config
      - prometheus-data:/tmp/prometheus
    
    # Internal port (not exposed directly)
    expose:
      - "5000"
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Networks
    networks:
      - trading-network
    
    # Dependencies
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
        labels: "service=trading-bot"

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: trading-redis
    restart: unless-stopped
    
    # Redis configuration
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    
    # Volumes
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    
    # Networks
    networks:
      - trading-network
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # PostgreSQL for production database
  postgres:
    image: postgres:15-alpine
    container_name: trading-postgres
    restart: unless-stopped
    
    # PostgreSQL configuration
    environment:
      - POSTGRES_DB=trading_bot
      - POSTGRES_USER=trading_bot
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    
    # Volumes
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_bot"]
      interval: 10s
      timeout: 5s
      retries: 5
    
    # Networks
    networks:
      - trading-network
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: trading-nginx
    restart: unless-stopped
    
    # Ports
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    
    # Volumes
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./web:/usr/share/nginx/html:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
      - nginx-logs:/var/log/nginx
    
    # Networks
    networks:
      - trading-network
    
    # Dependencies
    depends_on:
      - trading-bot
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: trading-prometheus
    restart: unless-stopped
    
    # Prometheus configuration
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
    
    # Volumes
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-storage:/prometheus
    
    # Internal port
    expose:
      - "9090"
    
    # Networks
    networks:
      - trading-network
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: trading-grafana
    restart: unless-stopped
    
    # Environment
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    
    # Volumes
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
    
    # Internal port
    expose:
      - "3000"
    
    # Networks
    networks:
      - trading-network
    
    # Dependencies
    depends_on:
      - prometheus
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backup service
  backup:
    image: alpine:latest
    container_name: trading-backup
    restart: unless-stopped
    
    # Install required tools
    command: >
      sh -c "
        apk add --no-cache postgresql-client redis bash &&
        crond -f -l 2
      "
    
    # Volumes
    volumes:
      - ./scripts/backup.sh:/backup.sh:ro
      - ./backups:/backups
      - postgres-data:/var/lib/postgresql/data:ro
      - redis-data:/data/redis:ro
      - ./data:/data/app:ro
    
    # Environment
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=trading_bot
      - POSTGRES_USER=trading_bot
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - BACKUP_RETENTION_DAYS=30
    
    # Networks
    networks:
      - trading-network
    
    # Dependencies
    depends_on:
      - postgres
      - redis

# Named volumes
volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  prometheus-storage:
    driver: local
  grafana-data:
    driver: local
  nginx-cache:
    driver: local
  nginx-logs:
    driver: local

# Networks
networks:
  trading-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24