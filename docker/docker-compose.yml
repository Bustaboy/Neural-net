version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "8000:8000"
    environment:
      - DB_PATH=neuralnet.db
      - REDIS_URL=redis://redis:6379
    depends_on:
      - db
      - redis
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
      autoscaling:
        min_replicas: 2
        max_replicas: 5
        target_cpu_utilization: 60

  training:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - MODEL_PATH=models/central_model.pkl
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
      autoscaling:
        min_replicas: 1
        max_replicas: 3
        target_cpu_utilization: 60

  db:
    image: postgres:14
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=neuralnet
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=secret
    command: ["postgres", "-c", "shared_buffers=512MB", "-c", "work_mem=16MB"]  # Optimize memory

  redis:
    image: redis:6
    volumes:
      - redis_data:/data
    command: ["redis-server", "--maxmemory", "1gb"]  # Limit memory

  haproxy:
    image: haproxy:2.4
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
    ports:
      - "80:80"

  prometheus:
    image: prom/prometheus:v2.36.0
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:8.5.2
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"

  lambda-compliance:
    image: amazon/aws-lambda-python:3.9
    environment:
      - COMPLIANCE_API_KEY=YOUR_COMPLIANCE_API_KEY
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 128M

volumes:
  db_data:
  redis_data:
